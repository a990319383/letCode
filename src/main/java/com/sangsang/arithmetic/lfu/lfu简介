https://mp.weixin.qq.com/s/z4tNeHeT1GSIGOC3Xul3bQ
lfu:Least Frequently Used (最不常使用淘汰，强调的是使用频率)
基本要求：
    1.数据使用频次，频次越高的越靠前
    2.频次相同的，访问时间晚的靠前
比较简单但是慢的实现：
    双向链表 每一个node节点有value（具体的值），freq（访问次数）
    再需要一个HashMap映射 key 和上面链表节点之间的映射关系，定位到节点后就可以判断是否该节点属于被淘汰的（前N个节点为频率最高，最新的，N根据具体情况定）
时间复杂度O(1)的实现：
    需求：
        1.根据key定位到指定的value  (HashMap  查询时间复杂度O(1))
        2.每次操作这个key，不论是新增还是修改都需要使该key的使用频次freq + 1
        3.缓存放不下，需要淘汰数据的时候将freq最小的key进行删除
            问题：如何定位最小的freq？需要遍历吗？遍历之后时间复杂度就不是O(1)了
            解决方法：再次创建一个HashMap,存储记录最小的访问频次，此处同一个频次有多个节点，因为涉及到时间的问题，后使用的会被淘汰，
                所以存储多个节点的这个数据结构需要有顺序性，插入和取出顺序一致，并且不可重复（LinkedHashSet）
        4.定义一个缓存的容量，表示最大缓存数据条数，capacity ，淘汰数据的时候根据这个参数进行筛选，存储的数据量大于capacity时，就会从最小的频次中进行数据淘汰
    主要的数据结构：
        节点：Node 拥有属性： key  value  freq
        HashMap<key,Node>  满足需求1,2
        HashMap<freq,LindedHashSet<Node>>  满足需求3
        capacity  缓存的容量
        miniFreq  当前的最小访问频次